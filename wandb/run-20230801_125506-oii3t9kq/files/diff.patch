diff --git a/scenarios/__main__.py b/scenarios/__main__.py
index a5e413a..835cf15 100644
--- a/scenarios/__main__.py
+++ b/scenarios/__main__.py
@@ -1,13 +1,13 @@
 from simulator import Simulator
-from planners import GreedyPlanner, ShortestProcessingTime, FIFO, Random
+from planners import GreedyPlanner, ShortestProcessingTime, FIFO, Random, PPOPlanner
 from time import time
 import numpy as np
 import os
 import sys
 
 
-running_time = 5000
-write = True
+running_time = 20000
+write = False
 # Original main
 def simulate_competition(model_name):
     results = []
@@ -19,11 +19,11 @@ def simulate_competition(model_name):
         if i % 5 == 0:
             print(i)
         #planner = DedicatedResourcePlanner()
-        #planner = ShortestProcessingTime()
-        planner = FIFO()
+        # planner = ShortestProcessingTime()
+        #planner = FIFO()
         #planner = Random()       
 
-        #planner = PPOPlanner(os.getcwd() + "\\scenarios\\tmp\\" + f"{model_name}_30000000_2048" + "\\best_model.zip")
+        planner = PPOPlanner(os.getcwd() + "\\scenarios\\tmp\\" + f"{model_name}_30000000_2048" + "\\best_model.zip")
                              
         if write == False:
             log_dir = None
diff --git a/scenarios/bpo_env.py b/scenarios/bpo_env.py
index 1bc21d9..75d7622 100644
--- a/scenarios/bpo_env.py
+++ b/scenarios/bpo_env.py
@@ -1,5 +1,5 @@
-import gym
-from gym import spaces, Env
+import gymnasium as gym
+from gymnasium import spaces, Env
 import random
 import numpy as np
 from typing import List
@@ -7,25 +7,31 @@ from typing import List
 from simulator import Simulator
 
 class BPOEnv(Env):
-    def __init__(self, running_time, config_type, reward_function=None, write_to=None, cv=0.25) -> None:
+    def __init__(self, running_time, config_type, reward_function=None, check_interval=None, write_to=None, interval_mode=False) -> None:
         super().__init__()
         self.num_envs = 1
         self.running_time = running_time
         self.counter = 0
         self.nr_bad_assignments = 0
         self.nr_postpone = 0
+        self.nr_fake_transitions = 0
         self.config_type = config_type
         self.reward_function = reward_function
+        self.check_interval = check_interval
         self.write_to = write_to
-        self.cv = cv
+        self.interval_mode = interval_mode
         self.action_number = [0, 0, 0]
         self.action_time = [0, 0, 0]
         self.step_print = False
         self.last_reward = 0
         self.additional_rewards = 0
         self.previous_reward_time = 0
+        self.t_now = 0
+        self.reward_intervals = []
 
-        self.simulator = Simulator(running_time=self.running_time, planner=None, config_type=self.config_type, reward_function=self.reward_function, write_to=self.write_to, cv=self.cv)
+        self.simulator = Simulator(running_time=self.running_time, planner=None, config_type=self.config_type,
+                                   reward_function=self.reward_function, check_interval=self.check_interval,
+                                   interval_mode=self.interval_mode, write_to=self.write_to)
 
         #define lows and highs for different sections of the input
         lows = np.array([0 for x in range(len(self.simulator.input))])
@@ -49,8 +55,8 @@ class BPOEnv(Env):
         # spaces.Discrete returns a number between 0 and len(self.simulator.output)
         self.action_space = spaces.Discrete(len(self.simulator.output)) #action space is the cartesian product of tasks and resources in their resource pool
 
-        while (sum(self.define_action_masks()) <= 1):
-            self.simulator.run() # Run the simulator to get to the first decision
+        #while (sum(self.define_action_masks()) <= 1):
+        self.simulator.run() # Run the simulator to get to the first decision
 
 
     def step(self, action):
@@ -58,15 +64,17 @@ class BPOEnv(Env):
         if self.step_print: print('Time:\t', self.simulator.now)
         if self.step_print: print('State:\t', self.simulator.get_state())
         self.counter += 1
-        if action == 2:
-            self.nr_bad_assignments += 1
-        elif action == len(self.simulator.output)-1:
+
+        if action == len(self.simulator.output) - 2:
             self.nr_postpone += 1
+        if action == len(self.simulator.output) - 1:
+            self.nr_fake_transitions += 1
 
         print_every = 500
         if self.counter % print_every == 0:
-            print(f'nr of postpones: {self.nr_postpone}/{print_every}')
-            self.nr_bad_assignments = 0
+            print(f'Nr of postpones: {self.nr_postpone}/{print_every}')
+            print(f'Nr of fake transitions: {self.nr_fake_transitions}/{print_every}')
+            self.nr_fake_transitions = 0
             self.nr_postpone = 0
             state = self.simulator.get_state()
             print(state, '\n')
@@ -86,12 +94,12 @@ class BPOEnv(Env):
             info (dict): contains auxiliary diagnostic information (helpful for debugging, and sometimes learning)
         """
 
-
         # 1 Process action
         # 2 Do the timestep
         # 3 Return reward
         # Assign one resources per iteration. If possible, another is assigned in next step without advancing simulator
         assignment = self.simulator.output[action] # (Task X, Resource Y)
+        #print('Before:',self.simulator.get_state(), self.define_action_masks(), assignment, self.simulator.now)
         # state = self.simulator.get_state()
         # if assignment == 'Postpone':
         #     if state[0] > 0 and state[1] > 0:
@@ -100,45 +108,63 @@ class BPOEnv(Env):
         #         self.simulator.current_reward -= 50
         #print(assignment, self.simulator.get_state(), self.action_masks(), self.simulator.output)
         #print('Moment of decisions: ', self.simulator.now, '. Action:', assignment, self.simulator.get_state())
-        unassigned_tasks = [sum([1 if task.task_type == el else 0 for task in self.simulator.available_tasks]) for el in self.simulator.task_types[:-1]] # sum of unassigned tasks per type
+        #shortened_state = [np.round(i, 2) if n in [5, 6] else i for n, i in enumerate(self.simulator.get_state())]
+        #print(f'Action at t={t_now}. -- Nr cases: {len(self.simulator.uncompleted_cases)}. -- State: {shortened_state}. -- Action: {assignment}.')
+
+        # unassigned_tasks = [sum([1 if task.task_type == el else 0 for task in self.simulator.available_tasks]) for el in self.simulator.task_types[:-1]] # sum of unassigned tasks per type
 
-        available_resources = [resource for resource in self.simulator.available_resources]
+        # available_resources = [resource for resource in self.simulator.available_resources]
 
         #print(self.simulator.now, '\t', unassigned_tasks, '\t', available_resources, '\t', assignment, '\t', reward)
 
 
         if self.step_print: print('Action:\t', assignment)
-        if assignment != 'Postpone':
+        if assignment != 'Postpone' and assignment != 'Wait':
             if self.simulator.planner == None:
                 assignment = (assignment[0], (next((x for x in self.simulator.available_tasks if x.task_type == assignment[1]), None)))
             #print('stuck 1', assignment, self.simulator.now)
             self.simulator.process_assignment(assignment)
-
+            #print('After:',self.simulator.get_state(), self.define_action_masks(), (assignment[0], assignment[1].task_type), self.simulator.now, '\n')
             #print('Before action: ', self.simulator.now)
             # While assignment not possible and simulator not finished (postpone always possible)
-            while (sum(self.define_action_masks()) <= 1) and (self.simulator.status != 'FINISHED'):
-                #print('ASSIGNED', self.simulator.now)
-                self.simulator.run() # breaks each time at resource assignment, continues if no assignment possible
-            #print('After action: ', self.simulator.now)
-        else: # Postpone action
-            unassigned_tasks = [sum([1 if task.task_type == el else 0 for task in self.simulator.available_tasks]) for el in self.simulator.task_types] # sum of unassigned tasks per type
 
-            available_resources = [resource for resource in self.simulator.available_resources]
+        #     while self.simulator.fake_transition == False\
+        #         and ((sum(self.define_action_masks()) <= 1) and (self.simulator.status != 'FINISHED')):
+        #         #print('ASSIGNED', self.simulator.now)
+        #         self.simulator.run() # breaks each time at resource assignment, continues if no assignment possible
+        #     #print('After action: ', self.simulator.now)
+        # else: # Postpone action or fake transition
+        #     unassigned_tasks = [sum([1 if task.task_type == el else 0 for task in self.simulator.available_tasks]) for el in self.simulator.task_types] # sum of unassigned tasks per type
+
+        #     available_resources = [resource for resource in self.simulator.available_resources]
 
-            #print('Before postpone: ', self.simulator.now)
-            while (self.simulator.status != 'FINISHED') and ((sum(self.define_action_masks()) <= 1) or (unassigned_tasks == [sum([1 if task.task_type == el else 0 for task in self.simulator.available_tasks]) for el in self.simulator.task_types] and \
+        #     #print('Before postpone: ', self.simulator.now)
+        #     while self.simulator.fake_transition == False\
+        #             and (self.simulator.status != 'FINISHED')\
+        #             and ((sum(self.define_action_masks()) <= 1)\
+        #             or (unassigned_tasks == [sum([1 if task.task_type == el else 0 for task in self.simulator.available_tasks]) for el in self.simulator.task_types]\
+        #             and available_resources == [resource for resource in self.simulator.available_resources])):
 
-                    available_resources == [resource for resource in self.simulator.available_resources])):
+        self.simulator.run()
 
-                self.simulator.run()
+        
             # Penatly for postponing
-            postpone_penalty = -0.001#-0.001 * len(self.simulator.available_tasks) #.05#-0.005
-            self.simulator.current_reward += postpone_penalty
-            self.simulator.total_reward += postpone_penalty
+            # postpone_penalty = -0.001#-0.001 * len(self.simulator.available_tasks) #.05#-0.005
+            # self.simulator.current_reward += postpone_penalty
+            # self.simulator.total_reward += postpone_penalty
             #print('After postpone: ', self.simulator.now)
 
+        #if self.simulator.now - self.t_now > self.fake_transition_interval:
+        #    print('MORE THAN 0.5!!', self.simulator.now, self.t_now)
+        self.reward_intervals.append(self.simulator.now - self.t_now)
+
 
+        # if self.simulator.now - self.t_now > self.check_interval:
+        #     print('More than. Sim time', self.simulator.now, 'prev time', self.t_now)
+        # elif self.simulator.now - self.t_now < self.check_interval:
+        #     print('Less than. Sim time', self.simulator.now, 'prev time', self.t_now)
 
+        self.t_now = self.simulator.now
         reward = self.simulator.current_reward
         # if reward > 0:
         #     reward = reward / (1 + (self.simulator.now-self.previous_reward_time))
@@ -180,15 +206,16 @@ class BPOEnv(Env):
             # print(f'running: {self.simulator.running_time}, last_moment: {self.simulator.last_reward_moment}')
             # current_reward = (self.simulator.running_time - self.simulator.last_reward_moment) * len(self.simulator.uncompleted_cases)
             if self.simulator.reward_function == 'AUC':
-                    current_reward = (self.simulator.now - self.simulator.last_reward_moment) * len(self.simulator.uncompleted_cases)
-                    self.simulator.current_reward -= current_reward
-                    self.simulator.total_reward -= current_reward
-                    self.simulator.last_reward_moment = self.simulator.now
+                current_reward = (self.simulator.now - self.simulator.last_reward_moment) * len(self.simulator.uncompleted_cases)
+                self.simulator.current_reward -= current_reward
+                self.simulator.total_reward -= current_reward
+                self.simulator.last_reward_moment = self.simulator.now
             # self.simulator.last_reward_moment = self.simulator.running_time
 
             # reward = self.simulator.current_reward
             # self.simulator.current_reward = 0
             # print('FINAL REWARD', current_reward)
+            print('mean', np.mean(self.reward_intervals), 'min', min(self.reward_intervals), 'max', max(self.reward_intervals))
             return self.simulator.get_state(), reward, True, {}
         else:
             # current_reward = (self.simulator.now - self.simulator.last_reward_moment) * len(self.simulator.uncompleted_cases)
@@ -198,10 +225,13 @@ class BPOEnv(Env):
 
             # reward = self.simulator.current_reward
             # self.simulator.current_reward = 0
+            # shortened_state = [np.round(i, 2) if n in [5, 6] else i for n, i in enumerate(self.simulator.get_state())]
+            # print(f'Reward at t={self.simulator.now} after {self.simulator.now - t_now} time untis. -- Nr cases: {len(self.simulator.uncompleted_cases)}. -- State: {shortened_state}. -- Reward: {reward}. \n')
+
             return self.simulator.get_state(), reward, False, {}
 
 
-    def reset(self):
+    def reset(self, seed: int | None = None):
         """Resets the environment to an initial state and returns an initial
         observation.
 
@@ -216,13 +246,16 @@ class BPOEnv(Env):
         """
 
         print("-------Resetting environment-------")
+        self.__init__(self.running_time, self.config_type, reward_function=self.reward_function, 
+                      check_interval=self.check_interval, write_to=self.reward_function,
+            	      interval_mode=self.interval_mode)
 
-        self.simulator = Simulator(running_time=self.running_time, planner=None, config_type=self.config_type, reward_function=self.reward_function, write_to=self.write_to, cv=self.cv)
-        while (sum(self.define_action_masks()) <= 1):
-            self.simulator.run() # Run the simulator to get to the first decision
+        # self.simulator = Simulator(running_time=self.running_time, planner=None, config_type=self.config_type, reward_function=self.reward_function, write_to=self.write_to)
+        # while (sum(self.define_action_masks()) <= 1):
+        #     self.simulator.run() # Run the simulator to get to the first decision
 
         #self.finished = False
-        return self.simulator.get_state()
+        return self.simulator.get_state(), {}
 
 
     def render(self, mode='human', close=False):
@@ -239,7 +272,10 @@ class BPOEnv(Env):
                     if state[self.simulator.input.index(resource + '_availability')] > 0:
                         mask[self.simulator.output.index((resource, task_type))] = 1
 
-        mask[-1] = 1 # Set postpone action to 1
+        if sum(mask) > 0:
+            mask[-2] = 1 # Set postpone action to 1
+        else:
+            mask[-1] = 1 # Fake transtition
 
         return list(map(bool, mask))
 
diff --git a/scenarios/callbacks.py b/scenarios/callbacks.py
index 2102ac1..d0c1e2d 100644
--- a/scenarios/callbacks.py
+++ b/scenarios/callbacks.py
@@ -1,6 +1,6 @@
 import os
 
-import gym
+import gymnasium as gym
 import numpy as np
 import matplotlib.pyplot as plt
 
diff --git a/scenarios/config.txt b/scenarios/config.txt
index 5e90149..283b390 100644
--- a/scenarios/config.txt
+++ b/scenarios/config.txt
@@ -47,9 +47,9 @@
 "n_system" :       {"mean_interarrival_time"  : 2,
                     "task_types"              : ["Start", "Task I", "Task J"],
                     "resources"               : ["Resource 9", "Resource 10"],
-                    "resource_pools"          : {"Task I": {"Resource 9":[3.0, 1]},                                                            
-                                                 "Task J": {"Resource 9":[2.0, 1],
-                                                            "Resource 10":[2.4, 1]}},
+                    "resource_pools"          : {"Task I": {"Resource 10":[2.4, 1]},                                                            
+                                                 "Task J": {"Resource 9":[3.0, 1],
+                                                            "Resource 10":[2.0, 1]}},
                     "transitions"             : {"Start" : [0, 0.5, 0.5, 0],
                                                  "Task I": [0, 0, 0, 1],
                                                  "Task J": [0, 0, 0, 1]}},                                                 
diff --git a/scenarios/evaluation.ipynb b/scenarios/evaluation.ipynb
index 1168d70..326c381 100644
--- a/scenarios/evaluation.ipynb
+++ b/scenarios/evaluation.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -13,7 +13,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -22,12 +22,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -44,7 +44,7 @@
       "ppo 9.6 (0.42)\n",
       "svfa 9.0 (0.26)\n",
       "spt 12.4 (0.71)\n",
-      "fifo 8.7 (0.33)\n",
+      "fifo 6.0 (0.11)\n",
       "random 10.7 (0.45)\n"
      ]
     },
@@ -272,12 +272,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -413,6 +413,14 @@
    "execution_count": 8,
    "metadata": {},
    "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "c:\\Users\\s144763\\Anaconda3\\envs\\drl_env\\lib\\site-packages\\scipy\\__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n",
+      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
+     ]
+    },
     {
      "data": {
       "text/plain": [
diff --git a/scenarios/planners.py b/scenarios/planners.py
index a39574e..8aca43c 100644
--- a/scenarios/planners.py
+++ b/scenarios/planners.py
@@ -385,6 +385,14 @@ class PPOPlanner(Planner):
     def linkSimulator(self, simulator):
         self.simulator = simulator
 
+    def get_possible_assignments(self, available_tasks, available_resources, resource_pools):
+        possible_assignments = []
+        for task_type in set(task.task_type for task in available_tasks):
+            for resource in available_resources:
+                if resource in resource_pools[task_type]:
+                    possible_assignments.append((resource, task_type))
+        return list(set(possible_assignments))
+
     def define_action_masks(self, state) -> List[bool]:
         #state = self.simulator.get_state()
         mask = [0 for _ in range(len(self.simulator.output))]
@@ -395,7 +403,10 @@ class PPOPlanner(Planner):
                     if state[self.simulator.input.index(resource + '_availability')] > 0:
                         mask[self.simulator.output.index((resource, task_type))] = 1
 
-        mask[-1] = 1 # Set postpone action to 1
+        # if sum(mask[0:len(self.simulator.output)]) > 0:
+        #     mask[-2] = 1 # Set postpone action to 1
+        # else:
+        #     mask[-1] = 1 # Fake transtition
 
         return list(map(bool, mask))
 
@@ -404,8 +415,10 @@ class PPOPlanner(Planner):
 
 
 
-    def plan(self, available_resources, unassigned_tasks, resource_pool):
+    def plan(self, available_resources, unassigned_tasks, resource_pools):
+        #if len(self.get_possible_assignments(self, available_resources, unassigned_tasks, resource_pools)) == 0:
         state = self.simulator.get_state()
+        
         #print(state)
         #mask = self.define_action_masks(state)        
         
diff --git a/scenarios/results_svfa/bpo b/scenarios/results_svfa/bpo
deleted file mode 100644
index fb4d424..0000000
Binary files a/scenarios/results_svfa/bpo and /dev/null differ
diff --git a/scenarios/results_svfa/complete b/scenarios/results_svfa/complete
deleted file mode 100644
index db73509..0000000
Binary files a/scenarios/results_svfa/complete and /dev/null differ
diff --git a/scenarios/results_svfa/complete_parallel b/scenarios/results_svfa/complete_parallel
deleted file mode 100644
index db73509..0000000
Binary files a/scenarios/results_svfa/complete_parallel and /dev/null differ
diff --git a/scenarios/results_svfa/complete_reversed b/scenarios/results_svfa/complete_reversed
deleted file mode 100644
index 377faa6..0000000
Binary files a/scenarios/results_svfa/complete_reversed and /dev/null differ
diff --git a/scenarios/results_svfa/down_stream b/scenarios/results_svfa/down_stream
deleted file mode 100644
index 13224b2..0000000
Binary files a/scenarios/results_svfa/down_stream and /dev/null differ
diff --git a/scenarios/results_svfa/high_utilization b/scenarios/results_svfa/high_utilization
deleted file mode 100644
index 6c8c660..0000000
Binary files a/scenarios/results_svfa/high_utilization and /dev/null differ
diff --git a/scenarios/results_svfa/low_utilization b/scenarios/results_svfa/low_utilization
deleted file mode 100644
index 4c49da5..0000000
Binary files a/scenarios/results_svfa/low_utilization and /dev/null differ
diff --git a/scenarios/results_svfa/n_system b/scenarios/results_svfa/n_system
deleted file mode 100644
index 6377545..0000000
Binary files a/scenarios/results_svfa/n_system and /dev/null differ
diff --git a/scenarios/results_svfa/parallel b/scenarios/results_svfa/parallel
deleted file mode 100644
index e808633..0000000
Binary files a/scenarios/results_svfa/parallel and /dev/null differ
diff --git a/scenarios/results_svfa/slow_server b/scenarios/results_svfa/slow_server
deleted file mode 100644
index 76327f1..0000000
Binary files a/scenarios/results_svfa/slow_server and /dev/null differ
diff --git a/scenarios/simulator.py b/scenarios/simulator.py
index bca935b..0362c5a 100644
--- a/scenarios/simulator.py
+++ b/scenarios/simulator.py
@@ -4,8 +4,9 @@ import sys
 from enum import Enum, auto
 from collections import deque
 import random
-from planners import GreedyPlanner
+from planners import GreedyPlanner, PPOPlanner
 import json
+import math
 
 class Event:
     def __init__(self, event_type, moment, task=None, resource=None):
@@ -20,6 +21,7 @@ class Event:
 
 
 class EventType(Enum):
+    ASSIGNMENT_CHECK = auto()
     CASE_ARRIVAL = auto()
     CASE_DEPARTURE = auto()
     TASK_START = auto()
@@ -66,7 +68,9 @@ class Task:
 
 
 class Simulator:    
-    def __init__(self, running_time, planner, config_type, reward_function=None, write_to=None, cv=0.25):
+    def __init__(self, running_time, planner, config_type, 
+                 reward_function=None, check_interval=None,
+                 write_to=None, interval_mode=False):
         self.config_type = config_type
         with open(os.path.join(sys.path[0], "config.txt"), "r") as f:
             data = f.read()
@@ -74,6 +78,8 @@ class Simulator:
         config = json.loads(data)        
         config = config[config_type]
             
+        self.interval_mode = interval_mode
+
         self.running_time = running_time
         self.status = "RUNNING"
         self.debug = False
@@ -85,8 +91,6 @@ class Simulator:
         self.sumxx = 0
         self.sumw = 0
 
-        self.cv = cv # for Gamma distribution
-
         self.available_tasks = []
         self.waiting_parallel_tasks = []
         self.reserved_tasks = []
@@ -117,12 +121,14 @@ class Simulator:
                      self.task_types +\
                      ['Total tasks'] # Should be lists of strings
         #                      [resource + '_busy_time' for resource in self.resources] + \
-        self.output = [(resource, task) for task in self.task_types[1:] for resource in self.resources if resource in self.resource_pools[task]] + ['Postpone']
+        self.output = [(resource, task) for task in self.task_types[1:] for resource in self.resources if resource in self.resource_pools[task]] + ['Postpone'] + ['Wait']
 
         self.reward_function = reward_function
         self.write_to = write_to
         self.current_reward = 0
         self.total_reward = 0
+        self.check_interval = check_interval
+        self.fake_transition = False
 
         self.reward_case = 1
         self.reward_task_start = 0
@@ -202,10 +208,6 @@ class Simulator:
         return case
 
     def process_assignment(self, assignment):
-        #print(assignment, [task.task_type for task in self.available_tasks], [resource for resource in self.available_resources])    
-        if self.reward_function == 'task':
-            self.current_reward += self.reward_task_start  
-            self.total_reward += self.reward_task_start
         self.available_resources.remove(assignment[0])
         self.available_tasks.remove(assignment[1])
         # self.events.append(Event(EventType.TASK_START, self.now, assignment[0], assignment[1]))
@@ -214,6 +216,7 @@ class Simulator:
         self.resource_last_start[assignment[0]] = self.now
         assignment[1].start_time = self.now
         pt = self.sample_processing_time(assignment[0], assignment[1].task_type)
+        #print(pt)
         self.events.append(Event(EventType.TASK_COMPLETE, self.now + pt, assignment[1], assignment[0]))
         self.events.sort()
 
@@ -241,6 +244,9 @@ class Simulator:
     def init_simulation(self):
         self.available_resources = [resource for resource in self.resources]
         self.events.append(Event(EventType.CASE_ARRIVAL, self.sample_interarrival_time()))
+        if self.interval_mode == True:
+            self.events.append(Event(EventType.ASSIGNMENT_CHECK, self.check_interval))
+
 
     def get_state(self):
         ### Resource binary, busy time, assigned to + nr of each task
@@ -266,6 +272,7 @@ class Simulator:
         else:
             task_types_num = [0 for el in self.task_types]
         # + resources_busy_time +
+        #normalized_nr_tasks = min(1, len(self.available_tasks)/1000)
         return resources_available + resources_assigned + task_types_num + [len(self.available_tasks)]
 
         ### Resource binary + proportion tasks + total task
@@ -288,6 +295,16 @@ class Simulator:
             event = self.events.pop(0)            
             self.now = event.moment
             if self.now <= self.running_time: # To prevent next event time after running time
+                if event.event_type == EventType.ASSIGNMENT_CHECK:
+                    current_reward = (self.now - self.last_reward_moment) * len(self.uncompleted_cases)
+                    self.current_reward -= current_reward
+                    self.total_reward -= current_reward
+                    self.last_reward_moment = self.now
+
+                    self.events.append(Event(EventType.ASSIGNMENT_CHECK, self.now + self.check_interval))
+                    self.events.sort()
+                    break
+
                 if event.event_type == EventType.CASE_ARRIVAL:
                     if self.reward_function == 'AUC':
                         current_reward = (self.now - self.last_reward_moment) * len(self.uncompleted_cases)
@@ -300,33 +317,28 @@ class Simulator:
                     for task in self.generate_initial_task(case.id):
                         self.available_tasks.append(task)
                     self.events.append(Event(EventType.CASE_ARRIVAL, self.now + self.sample_interarrival_time())) # Schedule new arrival
-                    if len(self.available_tasks) > 0 and len(self.available_resources) > 0:
-                        self.events.append(Event(EventType.PLAN_TASKS, self.now))
+                    if self.interval_mode == False:
+                        if len(self.available_tasks) > 0 and len(self.available_resources) > 0:
+                            self.events.append(Event(EventType.PLAN_TASKS, self.now))
                     self.events.sort()
 
-                if event.event_type == EventType.PLAN_TASKS:
-                    # Calculate reward
-                    if self.reward_function == 'AUC':
-                        current_reward = (self.now - self.last_reward_moment) * len(self.uncompleted_cases)
-                        self.current_reward -= current_reward
-                        self.total_reward -= current_reward
-                        self.last_reward_moment = self.now
-
-                    if self.planner == None: # DRL algorithm handles processing of assignments (training and inference)
-                        # there only is an assignment if there are free resources and tasks
-                        if len(self.available_tasks) > 0 and len(self.available_resources) > 0:
-                            break # Return to gym environment
-                    else: #at inference time, we call the plan function of the planner
-                        assignments = self.planner.plan(self.available_tasks, self.available_resources, self.resource_pools)
-                        for assignment in assignments:
-                            self.process_assignment(assignment) # Reserves the task and resource, schedules TASK_START event
-                            # Reward +1 for each task start
-
-                # if event.event_type == EventType.TASK_START:
-                #     event.task.start_time = self.now
-                #     pt = self.sample_processing_time(event.task.task_type, event.resource)
-                #     self.events.append(Event(EventType.TASK_COMPLETE, self.now + pt, event.task, event.resource))
-                #     self.events.sort()
+                if self.interval_mode == False:
+                    if event.event_type == EventType.PLAN_TASKS:
+                        # Calculate reward
+                        if self.reward_function == 'AUC':
+                            current_reward = (self.now - self.last_reward_moment) * len(self.uncompleted_cases)
+                            self.current_reward -= current_reward
+                            self.total_reward -= current_reward
+                            self.last_reward_moment = self.now
+
+                        if self.planner == None: # DRL algorithm handles processing of assignments (training and inference)
+                            # there only is an assignment if there are free resources and tasks
+                            if len(self.available_tasks) > 0 and len(self.available_resources) > 0:
+                                break # Return to gym environment
+                        else: #at inference time, we call the plan function of the planner
+                            assignments = self.planner.plan(self.available_tasks, self.available_resources, self.resource_pools)
+                            for assignment in assignments:
+                                self.process_assignment(assignment) # Reserves the task and resource, schedules TASK_START event
 
                 if event.event_type == EventType.TASK_COMPLETE:
                     self.cases[event.task.case_id].append([event.task.task_type, event.resource, np.round(self.now, 2)])
@@ -380,12 +392,20 @@ class Simulator:
                             self.events.append(Event(EventType.CASE_DEPARTURE, self.now, event.task))
                         else:
                             self.available_tasks.append(next_task)
-                        
-                    if len(self.available_tasks) > 0 and len(self.available_resources) > 0:
-                        self.events.append(Event(EventType.PLAN_TASKS, self.now))
+
+                    if self.interval_mode == False:    
+                        if len(self.available_tasks) > 0 and len(self.available_resources) > 0:
+                            self.events.append(Event(EventType.PLAN_TASKS, self.now))
                     self.events.sort()
 
                 if event.event_type == EventType.CASE_DEPARTURE:
+                    # Calculate reward
+                    if self.reward_function == 'AUC':
+                        current_reward = (self.now - self.last_reward_moment) * len(self.uncompleted_cases) # include case that departed
+                        self.current_reward -= current_reward
+                        self.total_reward -= current_reward
+                        self.last_reward_moment = self.now
+
                     self.cases[event.task.case_id].append(['completed', self.now])
                     case = self.uncompleted_cases[event.task.case_id]
                     case.departure_time = self.now
@@ -397,24 +417,6 @@ class Simulator:
                     self.sumxx += cycle_time * cycle_time
                     self.sumw += 1
 
-                    # Calculate reward
-                    if self.reward_function == 'AUC':
-                        current_reward = (self.now - self.last_reward_moment) * len(self.uncompleted_cases)
-                        self.current_reward -= current_reward
-                        self.total_reward -= current_reward
-                        self.last_reward_moment = self.now
-
-                    if self.reward_function == 'task':
-                        self.current_reward += self.reward_case #- len(self.uncompleted_cases)
-                        self.total_reward += self.reward_case
-                        #print(cycle_time, self.reward_case / cycle_time)
-
-                    if self.reward_function == 'cycle_time':
-                        # self.current_reward -= cycle_time #- len(self.uncompleted_cases)
-                        # self.total_reward -= cycle_time
-                        reward = self.reward_case / (1 + cycle_time)
-                        self.current_reward += reward #- len(self.uncompleted_cases)
-                        self.total_reward += reward
 
 
         if self.now > self.running_time:
@@ -436,11 +438,11 @@ class Simulator:
                     self.resource_total_busy_time[event.resource] += self.running_time - self.resource_last_start[event.resource]
                     
             # Uncomment to include the cycle time of uncompleted cases
-            # for case in self.uncompleted_cases.values():
-            #     cycle_time = self.running_time - case.arrival_time
-            #     self.sumx += cycle_time
-            #     self.sumxx += cycle_time * cycle_time
-            #     self.sumw += 1
+            for case in self.uncompleted_cases.values():
+                cycle_time = self.running_time - case.arrival_time
+                self.sumx += cycle_time
+                self.sumxx += cycle_time * cycle_time
+                self.sumw += 1
 
             print(f'Uncompleted cases: {len(self.uncompleted_cases)}')
             print(f'Resource utilisation: {[(resource, busy_time/self.running_time) for resource, busy_time in self.resource_total_busy_time.items()]}')
diff --git a/scenarios/train_DRL.py b/scenarios/train_DRL.py
index 9f5c8ab..4c70770 100644
--- a/scenarios/train_DRL.py
+++ b/scenarios/train_DRL.py
@@ -1,6 +1,6 @@
 from collections import deque
 from subprocess import call
-import gym
+import gymnasium as gym
 import os
 import numpy as np
 from bpo_env import BPOEnv
@@ -17,41 +17,47 @@ from stable_baselines3.common.results_plotter import load_results, ts2xy, plot_r
 from stable_baselines3.common.callbacks import CallbackList, CheckpointCallback
 from stable_baselines3.common.logger import configure
 
-from gym.wrappers import normalize
+from gymnasium.wrappers import normalize
 from stable_baselines3.common.vec_env import DummyVecEnv, SubprocVecEnv
 
 from callbacks import SaveOnBestTrainingRewardCallback
 from callbacks import custom_schedule, linear_schedule
 
+from wandb.integration.sb3 import WandbCallback
+import wandb
+
 
 class CustomPolicy(MaskableActorCriticPolicy):
     def __init__(self, *args, **kwargs):
         super(CustomPolicy, self).__init__(*args, **kwargs,
-                                           net_arch=[dict(pi=[512],
-                                                          vf=[512])])
+                                           net_arch=[dict(pi=[128, 128],
+                                                          vf=[128, 128])])
 
 
 if __name__ == '__main__':
     #if true, load model for a new round of training
     
-    running_time = 5000
+    running_time = 1000
     num_cpu = 1
     load_model = False
     model_name = "ppo_masked"
-    config_type= 'complete_reversed'#sys.argv[1]
+    config_type= 'complete'#sys.argv[1]
     print(config_type)
-    reward_function = 'cycle_time'
-    time_steps = 30000000 # Total timesteps
-    n_steps = 2048 # Number of steps for each network update
+    reward_function = 'AUC'
+    time_steps = 1000000 # Total timesteps    
+    check_interval = 0.01
+    n_steps = int(running_time/check_interval) # Number of steps for each network update
     # Create log dir
-    log_dir = f"./scenarios/tmp/{config_type}_{time_steps}_{n_steps}/" # Logging training results
+    log_dir = f"./scenarios/tmp/{config_type}_{time_steps}_{check_interval}/" # Logging training results
 
     os.makedirs(log_dir, exist_ok=True)
 
     print(f'Training agent for {config_type} with {time_steps} timesteps in updates of {n_steps} steps.')
     # Create and wrap the environment
     # Reward functions: 'AUC', 'case_task'
-    env = BPOEnv(running_time=running_time, config_type=config_type, reward_function=reward_function, write_to=log_dir)  # Initialize env
+    env = BPOEnv(running_time=running_time, config_type=config_type, 
+                 reward_function=reward_function, check_interval=check_interval,
+                 write_to=log_dir, interval_mode=True)  # Initialize env
     env = Monitor(env, log_dir)  
 
     # resource_str = ''
@@ -61,18 +67,33 @@ if __name__ == '__main__':
     #     # Writing data to a file
     #     file.write(f"uncompleted_cases,{resource_str}total_reward,mean_cycle_time,std_cycle_time\n")
  
-    # Create the model
-    model = MaskablePPO(MaskableActorCriticPolicy, env, clip_range=0.1, learning_rate=linear_schedule(0.0001), n_steps=int(n_steps), gamma=0.999, verbose=1)
 
+    config = {
+        "policy_type": "MaskableActorCriticPolicy",
+        "total_timesteps": time_steps,
+        "env_name": config_type,
+    }
+    run = wandb.init(
+        project="sb3",
+        config=config,
+        sync_tensorboard=True,  # auto-upload sb3's tensorboard metrics
+        monitor_gym=True,  # auto-upload the videos of agents playing the game
+        save_code=True,  # optional
+    )
+
+
+    # Create the model
+    model = MaskablePPO(MaskableActorCriticPolicy, env, learning_rate=0.0001, n_steps=int(n_steps), clip_range=0.1, gamma=1, verbose=1)
+    #learning_rate=linear_schedule(0.0001)
     #Logging to tensorboard. To access tensorboard, open a bash terminal in the projects directory, activate the environment (where tensorflow should be installed) and run the command in the following line
     # tensorboard --logdir ./tmp/
     # then, in a browser page, access localhost:6006 to see the board
-    model.set_logger(configure(log_dir, ["stdout", "csv", "tensorboard"]))
+    #model.set_logger(configure(log_dir, ["stdout", "csv", "tensorboard"]))
 
 
     # Train the agent
     callback = SaveOnBestTrainingRewardCallback(check_freq=int(n_steps), log_dir=log_dir)
-    model.learn(total_timesteps=int(time_steps), callback=callback)
+    model.learn(total_timesteps=int(time_steps), callback=WandbCallback())
 
     # For episode rewards, use env.get_episode_rewards()
     # env.get_episode_times() returns the wall clock time in seconds of each episode (since start)
@@ -81,7 +102,7 @@ if __name__ == '__main__':
     print(env.get_episode_rewards())
     #     print(env.get_episode_times())
 
-    model.save(f'{log_dir}/{model_name}_{running_time}_final')
+    model.save(f'{log_dir}/{model_name}_{time_steps}_{check_interval}_final')
 
     #import matplotlib.pyplot as plt
     #plot_results([log_dir], time_steps, results_plotter.X_TIMESTEPS, f"{model_name}")
